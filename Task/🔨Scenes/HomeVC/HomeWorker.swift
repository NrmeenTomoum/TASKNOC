//
//  HomeWorker.swift
//  Task
//
//  Created by Nrmeen Tomoum on 12/22/18.
//  Copyright (c) 2018 MobileNOC. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import AlamofireObjectMapper
import Alamofire
import ObjectMapper
class HomeWorker
{
    func getServersData(request: Home.Server.Request , completionHandler: @escaping ( Home.Server.Response?,errorMessage?,errorMessage? ) -> Void)
    {
         let authUserName = "admin@boot.com"
         let authPassword = "admin"
        let credential = URLCredential(user: authUserName, password: authPassword, persistence: .permanent)
        
//        let user = "admin@boot.com"
//        let password = "admin"
        let URL = Constants.Server.Services.getListOfServesData + "page=\(request.page)&size=\(request.size)"
        print("========================================>",URL)
        //.authenticate(user: "admin@boot.com", password: "admin")
          MyManager.sharedInstance.defaultManager.request(URL, method: .get , parameters: [:], encoding: JSONEncoding.default, headers: RequestComponent.headerComponent(requireAuthOrNot: false)).authenticate(usingCredential: credential).responseObject{(response: DataResponse< Home.Server.Response>)  in
            let respons = response.result.value
            print("respons",response.result.value)
            switch response.result {
            case .success:
                completionHandler(respons!, nil, nil)
            case .failure:
                completionHandler(nil,errorMessage(message:"Server Down"), nil)
            }
        }
        
//        GenericRequest.requestGetMappable(URL: URL) { (result : Home.Server.Response? , errorMessage, serverError) in
//
//            completionHandler( result, errorMessage ,serverError )
//
//        }
        
    }
}
class MyManager {
    static let sharedInstance = MyManager()
    
    let defaultManager: Alamofire.SessionManager = {
        let serverTrustPolicies: [String: ServerTrustPolicy] = [
            "45.55.43.15": .disableEvaluation
        ]

        let configuration = URLSessionConfiguration.default
        configuration.httpAdditionalHeaders = Alamofire.SessionManager.defaultHTTPHeaders
        
        return Alamofire.SessionManager(
            configuration: configuration,
            serverTrustPolicyManager: ServerTrustPolicyManager(policies: serverTrustPolicies)
        )
    }()
}
